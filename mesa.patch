diff --git meson.build meson.build
index 250b528..5e9e617 100644
--- meson.build
+++ meson.build
@@ -634,7 +634,7 @@ if with_gallium_kmsro and (with_platform_x11 and not with_dri3)
 endif
 
 dep_dxheaders = null_dep
-if with_gallium_d3d12 or with_microsoft_clc or with_microsoft_vk
+if true or with_gallium_d3d12 or with_microsoft_clc or with_microsoft_vk
   dep_dxheaders = dependency('directx-headers', required : false)
   if not dep_dxheaders.found()
     dep_dxheaders = dependency('DirectX-Headers',
@@ -1541,7 +1541,7 @@ if cc.links('int main() { return 0; }',
             args : '-Wl,--dynamic-list=@0@'.format(
               join_paths(meson.current_source_dir(), 'build-support/conftest.dyn')),
             name : 'dynamic-list')
-  with_ld_dynamic_list = true
+  with_ld_dynamic_list = false
 endif

 ld_args_build_id = cc.get_supported_link_arguments('-Wl,--build-id=sha1')
@@ -1166,7 +1166,6 @@ if cc.get_argument_syntax() == 'msvc'
     '/wd5105',  # macro expansion producing 'defined' has undefined behavior (winbase.h, need Windows SDK upgrade)
     '/we4020',  # Error when passing the wrong number of parameters
     '/we4024',  # Error when passing different type of parameter
-    '/we4189',  # 'identifier' : local variable is initialized but not referenced
     '/Zc:__cplusplus', #Set __cplusplus macro to match the /std:c++<version> on the command line
   ]
   c_args += cc.get_supported_arguments(_trial)
@@ -1722,7 +1722,7 @@ if dep_libudev.found()
   pre_args += '-DHAVE_LIBUDEV'
 endif

-llvm_modules = ['bitwriter', 'engine', 'mcdisassembler', 'mcjit', 'core', 'executionengine', 'scalaropts', 'transformutils', 'instcombine']
+llvm_modules = ['bitwriter', 'engine', 'mcdisassembler', 'mcjit', 'core', 'executionengine', 'scalaropts', 'transformutils', 'instcombine', 'passes']
 llvm_optional_modules = ['coroutines']
 if with_amd_vk or with_gallium_radeonsi or with_gallium_r600
   llvm_modules += ['amdgpu', 'bitreader', 'ipo']
diff --git src/gallium/drivers/llvmpipe/lp_tex_sample.h src/gallium/drivers/llvmpipe/lp_tex_sample.h
index 51813ea..652f0fc 100644
--- src/gallium/drivers/llvmpipe/lp_tex_sample.h
+++ src/gallium/drivers/llvmpipe/lp_tex_sample.h
@@ -38,7 +38,7 @@ struct lp_image_static_state;
 /**
  * Whether texture cache is used for s3tc textures.
  */
-#define LP_USE_TEXTURE_CACHE 0
+#define LP_USE_TEXTURE_CACHE 1
 
 /**
  * Pure-LLVM texture sampling code generator.
diff --git src/gallium/frontends/wgl/stw_device.c src/gallium/frontends/wgl/stw_device.c
index 2db745f..b1ab22b 100644
--- src/gallium/frontends/wgl/stw_device.c
+++ src/gallium/frontends/wgl/stw_device.c
@@ -253,7 +253,7 @@ stw_cleanup(void)
    st_screen_destroy(stw_dev->fscreen);
    FREE(stw_dev->fscreen);
 
-   stw_dev->screen->destroy(stw_dev->screen);
+   if (stw_dev->screen) stw_dev->screen->destroy(stw_dev->screen);
 
    stw_tls_cleanup();
 
diff --git src/gallium/targets/libgl-gdi/meson.build src/gallium/targets/libgl-gdi/meson.build
index 7ddcd8a..8658196 100644
--- src/gallium/targets/libgl-gdi/meson.build
+++ src/gallium/targets/libgl-gdi/meson.build
@@ -40,6 +40,7 @@ libopengl32 = shared_library(
   link_with : [
     libgallium_wgl, libglapi_bridge, libglapi
   ],
+  link_whole : [ libgallium_wgl ],
   dependencies : [
     idep_mesautil
   ],
diff --git src/gallium/targets/wgl/meson.build src/gallium/targets/wgl/meson.build
index 2999ee5..8b92387 100644
--- src/gallium/targets/wgl/meson.build
+++ src/gallium/targets/wgl/meson.build
@@ -29,10 +29,9 @@ wgl_def = custom_target(
 )

 gallium_wgl_name = get_option('gallium-windows-dll-name')
-libgallium_wgl = shared_library(
+libgallium_wgl = static_library(
   gallium_wgl_name,
   ['wgl.c'],
-  vs_module_defs : wgl_def,
   include_directories : [
     inc_include, inc_src, inc_mapi, inc_mesa, inc_gallium, inc_gallium_aux, inc_wgl, inc_gallium_winsys, inc_gallium_winsys_sw, inc_gallium_drivers,
   ],
diff --git src/util/futex.h src/util/futex.h
index 2a2a00c..5aff5ef 100644
--- src/util/futex.h
+++ src/util/futex.h
@@ -31,7 +31,7 @@
 #elif defined(__OpenBSD__)
 #define UTIL_FUTEX_SUPPORTED 1
 #elif defined(_WIN32) && !defined(WINDOWS_NO_FUTEX)
-#define UTIL_FUTEX_SUPPORTED 1
+#define UTIL_FUTEX_SUPPORTED 0
 #else
 #define UTIL_FUTEX_SUPPORTED 0
 #endif
